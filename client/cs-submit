#!/usr/bin/python

import subprocess
import uuid
import tempfile
import sys
import os
import logging
from optparse import OptionParser


# Set up a specific logger with our desired output level
logging.basicConfig(level=logging.WARNING)
log = logging.getLogger('cs-submit')



#
# Parse command line options
#
parser = OptionParser()

parser.set_defaults(myproxy_server="alto.cloud.nrc.ca")
parser.set_defaults(condor_submit_path="condor_submit")
parser.set_defaults(condor_args="")
parser.set_defaults(myproxy_server_port=7512)
parser.set_defaults(cloud_scheduler_DN="/C=CA/O=Grid/CN=host/vm129.cloud.nrc.ca")
parser.set_defaults(debug_output=False)

parser.add_option("--condor-args", action="store", type="string", dest="condor_args", help="arguments to pass to condor_submit command")
parser.add_option("--condor-submit-path", action="store", type="string", dest="condor_submit_path", help="path to condor_submit command")
parser.add_option("--myproxy-server", action="store", type="string", dest="myproxy_server", help="hostname of the myproxy server to user")
parser.add_option("--myproxy-server-port", action="store", type="int", dest="myproxy_server_port", help="port of the myproxy server to user", default=7512)
parser.add_option("--cs-dn", action="store", type="string", dest="cloud_scheduler_DN", help="DN of the cloud scheduler that will retreive the credentials")
parser.add_option("--debug", action="store_true", dest="debug_output", help="Enable verbose output")

(options, args) = parser.parse_args()
if options.debug_output == True:
    log.setLevel(logging.DEBUG)

condor_job_filename = sys.argv[len(sys.argv)-1]
log.debug('condor job filename: %s' % (condor_job_filename))



#
# Generate a unique identifier for this proxy
#
creds_id = uuid.uuid1()
log.debug('Credentials id: %s' % (creds_id,))


#
# Create the myproxy-init command to run
#
myproxy_init_cmd = '. $GLOBUS_LOCATION/etc/globus-user-env.sh && $GLOBUS_LOCATION/bin/myproxy-init -s %s -p %d -Z %s -l %s -n' % (options.myproxy_server, options.myproxy_server_port, options.cloud_scheduler_DN, creds_id)
log.debug('myproxy-init command: [%s]' % (myproxy_init_cmd,))


#
# Invoke the myproxy-init command and check its return value.
#
log.debug('Invoking myproxy-init command...')
myproxy_init_process = subprocess.Popen(myproxy_init_cmd, shell=True)
myproxy_init_process.wait()

log.debug('myproxy-init command returned %d' % (myproxy_init_process.returncode))
if myproxy_init_process.returncode != 0:
    sys.exit(1)


#
# Update the condor job description.
# The new ammended condor job description will be put in a
# temporary file.
#
log.debug('Creating new condor job description file...')
original_condor_job_file = open(condor_job_filename, 'r')
new_condor_job_file = open(tempfile.mkstemp()[1], 'w')
for line in original_condor_job_file:
    if line.strip() == 'Queue':
        new_condor_job_file.write('# MyProxy server and credentials information:\n')
        new_condor_job_file.write('+VMMyProxyCredsName     = "%s"\n' % (creds_id,))
        new_condor_job_file.write('+VMMyProxyServer        = "%s"\n' % (options.myproxy_server,))
        new_condor_job_file.write('+VMMyProxyServerPort    = "%d"\n' % (options.myproxy_server_port,))
        new_condor_job_file.write('\n')

    new_condor_job_file.write(line)


new_condor_job_file.close()
original_condor_job_file.close()

log.debug("New condor job description file created: %s" % (new_condor_job_file.name,))

# Now let's do the condor_submit call.
# Basically, we simply use whatever arguments was given starting with the
# condor_submit argument, up to the one before the last.  The last is then
# replaced by the new ammended condor job description file.
condor_submit_cmd = options.condor_submit_path + ' ' + options.condor_args + ' ' + new_condor_job_file.name
log.debug('condor_submit command: %s' % (condor_submit_cmd,))
condor_submit_process = subprocess.Popen(condor_submit_cmd, shell=True)
condor_submit_process.wait()
log.debug('condor_submit command returned %d' % (condor_submit_process.returncode))
if condor_submit_process.returncode != 0:
    log.error('Error with condor_submit command.')


# Cleanup
try:
    os.remove(new_condor_job_file.name)
except OSError:
    print('Error deleting temporary condor job description file %s' % (new_condor_job_file,))
