#!/usr/bin/env python
# vim: set expandtab ts=4 sw=4:

# Copyright (C) 2009 University of Victoria
# You may distribute under the terms of either the GNU General Public
# License or the Apache v2 License, as specified in the README file.

# cloud_status - tool to display information about cloud scheduler
# 
import xmlrpclib
import sys
import socket
from optparse import OptionParser
import logging
import platform

import cloudscheduler.utilities as utilities 
log = utilities.get_cloudscheduler_logger()

import cloudscheduler.cloud_management as cloud_management
import cloudscheduler.config as config

def main(argv=None):

    # Parse command line options
    parser = OptionParser()
    parser.add_option("-f", "--config-file", dest="config_file", metavar="FILE",
                      help="Designate a Cloud Sceduler config file")
    parser.add_option("-s", "--server-hostname", dest="server_hostname",
                      metavar="HOSTNAME",
                      help="Pick a specific machine's Cloud Scheduler"
                           "information server")
    parser.add_option("-p", "--port", dest="port", metavar="PORT",
                      help="Pick a custom port to connect to Cloud Scheduler"
                           "information server")
    parser.add_option("-a", "--all", action="store_true", 
                      dest="all", default=False, 
                      help="Apply Operation to All [VMs, Jobs, etc]")
    parser.add_option("-k", "--kill-vm", dest="killvm", action="store_true", 
                      default=False, help="Kill a VM, must specify cloud and VM ID.")
    parser.add_option("-c", "--cloud", dest="cloud_name", metavar="NAME", 
                      help="Cloud name for operation.")
    parser.add_option("-n", "--vm-id", dest="vm_id", metavar="ID", 
                      help="The VM ID of VM for operation.")
    parser.add_option("-r", "--refresh-proxy", metavar="PROXYTYPE", action="store",
                      dest="proxy_refresh", type="choice", choices=['vm','job'], help="Refresh Proxies for user")
    parser.add_option("-u", "--user", dest="user", action="store", metavar="USER", help="User to perform operation on")
    parser.add_option("-e", "--reconfig", dest="reconfig", action="store_true", default=False, help="Reload cloud_resources.conf")
    parser.add_option("-l", "--log-level", dest="log_level", action="store", type="choice", choices=['VERBOSE', 'DEBUG', 'WARNING', 'ERROR', 'INFO', 'CRITICAL'], help="Change the logging level")
    

    (cli_options, args) = parser.parse_args()

    # Initialize config
    if cli_options.config_file:
        config.setup(cli_options.config_file)
    else:
        config.setup()


    # Get port to connect to info server.
    #   Precedence: -p argument, then from config module
    if cli_options.port:
        server_port = cli_options.port
    else:
        server_port = config.admin_server_port

    if cli_options.server_hostname:
        server_hostname = cli_options.server_hostname
    else:
        server_hostname = platform.node()

    # Connect to info server
    try:
        s = xmlrpclib.ServerProxy("http://%s:%s" %
                                  (server_hostname, server_port))
        if cli_options.killvm:
            print cli_options.killvm
            if cli_options.cloud_name:
                if cli_options.vm_id:
                    print s.shutdown_vm(cli_options.cloud_name, cli_options.vm_id)
                elif cli_options.all:
                    print s.shutdown_cluster_all(cli_options.cloud_name)
                else:
                    print "Must provide a -n [VM ID] or -a to kill all VMs on this cloud."
            else:
                print "Must Provide the cloud name to kill VMs on and the VM ID or all flag."
        elif cli_options.reconfig:
            print s.cloud_resources_reconfig()
        elif cli_options.log_level:
            print s.change_log_level(cli_options.log_level)
        else:
            print "Run cloud_admin -h for help."


    except socket.error:
        print "%s: couldn't connect to cloud scheduler at %s on port %s."\
               % (sys.argv[0], server_hostname, server_port)
        print "Is the cloud scheduler running on port %s?" % server_port
    except:
        print "Unexpected error: ", sys.exc_info()[0], sys.exc_info()[1]
        print "Is the cloud scheduler running on port %s?" % server_port


if __name__ == "__main__":
    sys.exit(main())
