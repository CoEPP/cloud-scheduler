#
# A sample configuration file for the cloud scheduler.
#

[global]

# cloud_resource_config is the path to the default list of resources you want
#           to use with Cloud Scheduler. If no file is supplied on the command
#           line (-c some_cloud | --cloud-config=some_cloud), this file will
#           be used.
#
cloud_resource_config: /etc/cloudscheduler/cloud_resources.conf 

# condor_webservice_url must point to the URL of the SOAP service on your
#           Condor pool, and the port on which it is running (usually 8080).
#                       
#   The default value is http://localhost:8080
condor_webservice_url: http://localhost:8080

# condor_collector_url must point to the URL of the SOAP service for your
#           Condor collector, and the port on which it is running (usually 9618).
#                       
#   The default value is http://localhost:9618
condor_collector_url: http://localhost:9618

# condor_host_on_vm is the hostname of the central manager that the Condor
#           daemons on the VM connect to. This is normally derived from the
#           condor_webservice_url option, but some setups (for example, those
#           that use OpenVPN) might need a diferent hostname for the VMs than
#           for Cloud Scheduler.
#
#   The default value is the hostname from condor_webservice_url. If this value
#   is localhost, it won't be sent to the VM.
#
#condor_host_on_vm: your.condor.server.edu

# condor_context_file is the location on your VM image where cloud_scheduler
#           should write the address of your Condor central manager machine
#           This is required to automatically contextualize your VM to point
#           to your Condor Pool
#                       
#   The default value is nothing, so no contextualization will happen unless
#   a value is specifically placed here
#condor_context_file: /etc/condor/central_manager

# cert_file is the location of the (x509 or other) certificate that you would
#           like copied to your virtual machine. This is useful for setting
#           up VPN connections
#
#   There is no default.
#cert_file: /your/cert.pem

# key_file is the location of the (x509 or other) key that you would
#           like copied to your virtual machine. This is useful for setting
#           up VPN connections
#
#   There is no default.
#key_file: /your/key.pem

# cert_file_on_vm is where the (x509 or other) certificate cert_file
#           will be copied to on the booted VM.
#
#   The default is the location of cert_file
#cert_file_on_vm: /your/cert.pem

# key_file_on_vm is where the (x509 or other) key key_file
#           will be copied to on the booted VM.
#
#   The default is the location of key_file
#key_file_on_vm: /your/cert.pem


# image_attach_device is the device the image specified for a job is attached
#           to. 
#                       
#   The default value is sda
#image_attach_device: sda

# scratch_attach_device is the device the scratch space specified for a job is
#           attached to. 
#                       
#   The default value is sdb
#scratch_attach_device: sdb

# info_server_port is the port that the xmlrpc server that serves information
#           to tools like cloud_status uses. You may need to change this
#           to something other than the default if you have a conflict
#           with some other program, but you probably won't need to.
#
#   The default value is 8111
#info_server_port: 8111

# workspace_path is the path to the workspace (or workspace.sh) executable
#           used by Cloud Scheduler to start VMs on Nimbus resources.
#
#   The default value is "workspace", which assumes the executable is
#   in the path.
#workspace_path: /path/to/workspace
#
# persistence_file is the path to the Cloud Scheduler persistence file
#           which maintains Cloud Scheduler state information in case
#           of an unexpected exit from Cloud Scheduler (power outage, etc)
#
#   The default value is /var/run/cloudscheduler.persistence
#persistence_file: /var/run/cloudscheduler.persistence

# polling_error_threshold is the number of times a VM returns a error
#           during status polling before being shutdown
#   The default value is 10
# polling_error_threshold: 10

# condor_register_time_limit is the number of minutes Cloud Scheduler waits
# for a VM to register with Condor before determining there has been an error
# during boot and will shutdown the VM.
#   The default value is 15 (minutes)
#condor_register_time_limit: 15

# graceful_shutdown specifies if you want machines to only shutdown when no
#           job is running on them, this requires using condor_hold and 
#           condor_release on jobs and can affect performance, but will
#           prevent a job from being rescheduled due to Cloud_Scheduler
#           shutting down a job's VM once it has started running
#
#   The default is false
#graceful_shutdown: false

# scheduling_metric selects the type of scheduling cloud_scheduler will
# use to balance resources between users.
#    The default value is slot, other option(s) are: memory
#scheduling_metric: slot

# getclouds specifies if you want to use cloud monitoring data from the
#   cloud-aggregator. More information about cloud-aggregator is here
#   https://wiki.gridx1.ca/twiki/bin/view/Main/CloudAggregatorOverview
#
#   The default value is false
#getclouds: False

# scheduler_interval is the number of seconds between VM scheduling cycles.
#   Increasing this value will lower the load on the system, and decreasing
#   it will improve responsiveness. The default value is good for testing, 
#   but could result excessive load on a busy system.
#
#   The default value is 5
#scheduler_interval: 5

# vm_poller_interval is the number of seconds between VM polling cycles.
#   Increasing this value will lower the load on the system, and decreasing
#   it will improve responsiveness. The default value is good for testing, 
#   but could result excessive load on a busy system.
#
#   The default value is 5
#vm_poller_interval: 5

# job_poller_interval is the number of seconds between polling the Condor
#   Scheduler daemon. Increasing this value will lower the load on the
#   system, and decreasing it will improve responsiveness. The default 
#   value is good for testing, but could result excessive load on a
#   busy system. This is especially true if your Condor scheduler is busy.
#
#   The default value is 5
#job_poller_interval: 5

# machine_poller_interval is the number of seconds between polling the Condor
#   Collector daemon. Increasing this value will lower the load on the
#   system, and decreasing it will improve responsiveness. The default 
#   value is good for testing, but could result excessive load on a
#   busy system. This is especially true if your Condor scheduler is busy.
#
#   The default value is 5
#machine_poller_interval: 5

# cleanup_interval is the number of seconds between Cleanup cycles.
#   Increasing this value will lower the load on the system, and decreasing
#   it will improve responsiveness. The default value is good for testing, 
#   but could result excessive load on a busy system.
#
#   The default value is 5
#cleanup_interval: 5

[logging]

# log_level specifies how much information from Cloud Scheduler to log. 
#           
#   Choose from VERBOSE, DEBUG, INFO, WARNING, ERROR and CRITICAL
#   The default is INFO
#log_level: INFO

# log_format is the format of the logging output. It is a string in the
#           Python logging module format, as specified in its module
#           documentation here:
#           http://docs.python.org/library/logging.html#formatter
#
#
#
#   The default is "%(asctime)s - %(levelname)s - %(threadName)s - %(message)s", 
#   which yields messages like the following:
#   "2010-07-13 11:02:08,722 - DEBUG - MainThread - message"
#log_format: %(asctime)s - %(levelname)s - %(threadName)s - %(message)s

# log_location specifies where to put the Cloud Scheduler log file. If left
#           blank, logging will just be sent to standard out
#
#log_location: /var/log/cloudscheduler.log

# log_stdout specifies whether to log to standard out. If set to true, this
#           will log to stdout in addition to logging to a file specified
#           in log_location, if set to false, Cloud Scheduler won't log to
#           stdout, even if there is no value specified for log_location
#
#   The default is false
#log_stdout: false

# log_max_size is the maximum filesize in Bytes for your log file
#
#   The default is unlimited file size
#log_max_size: 2097152

